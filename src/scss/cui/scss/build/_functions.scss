@function hex2rgb($hex) {
    @return red($hex), green($hex), blue($hex);
}

@function color-yiq($color, $dark: $cui-color-gray-700, $light: $cui-color-white) {
    $r: red($color);
    $g: green($color);
    $b: blue($color);

    $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;

    @if ($yiq >= 128) {
        @return $dark;
    } @else {
        @return $light;
    }
}

/// Remove the unit of a length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit($number) {
    @if type-of($number) == 'number' and not unitless($number) {
        @return $number / ($number * 0 + 1);
    }
    @return $number;
}

/// Fetch nested keys
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Keys to fetch
/// @return {*}
@function map-deep-get($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return $map;
}

/// Test if map got all `$keys` nested with each others
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Keys to test
/// @return {Bool}
@function map-has-nested-keys($map, $keys...) {
    @each $key in $keys {
        @if not map-has-key($map, $key) {
            @return false;
        }
        $map: map-get($map, $key);
    }
    @return true;
}

/// Merge all specified maps into a single map
@function map-merge-all($maps...) {
    $collection: ();

    @each $map in $maps {
        $collection: map-merge($collection, $map);
    }
    @return $collection;
}

/// Set specified value with named key in named map
@function map-set($map, $key, $value) {
    $new: ($key: $value);
    @return map-merge($map, $new);
}

// Add percentage of white to a color
@function tint($color, $percent){
    @return mix(white, $color, $percent);
}

// Add percentage of black to a color
@function shade($color, $percent){
    @return mix(black, $color, $percent);
}
